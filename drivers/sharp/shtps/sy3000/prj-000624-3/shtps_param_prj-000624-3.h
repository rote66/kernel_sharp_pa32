/* drivers/sharp/shtps/sy3000/prj-000624-3/shtps_param_prj-000624-3.h
 *
 * Copyright (c) 2015, Sharp. All rights reserved.
 *
 * This software is licensed under the terms of the GNU General Public
 * License version 2, as published by the Free Software Foundation, and
 * may be copied, distributed, and modified under those terms.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 */
#ifndef __SHTPS_PARAM_PRJ_000624_3_H__
#define __SHTPS_PARAM_PRJ_000624_3_H__

/* ===================================================================================
 * [ Parameters ]
 */
/* -----------------------------------------------------------------------------------
 */
SHTPS_PARAM_DEF( SHTPS_PRM_STARTUP_MIN_TIME,	30 );
SHTPS_PARAM_DEF( SHTPS_SLEEP_IN_WAIT_MS, 	30  );
SHTPS_PARAM_DEF( SHTPS_SLEEP_OUT_WAIT_MS, 	0  );
SHTPS_PARAM_DEF( SHTPS_VEILVIEW_PATTERN, 	SHTPS_VEILVIEW_PATTERN_MONOCHROME_1H);

/* -----------------------------------------------------------------------------------
 */
SHTPS_PARAM_DEF(SHTPS_SY3X00_SPI_CLOCK_READ_SPEED,		TPS_SPI_R_CLOCK);
SHTPS_PARAM_DEF(SHTPS_SY3X00_SPI_CLOCK_WRITE_SPEED,		TPS_SPI_W_CLOCK);
SHTPS_PARAM_DEF(SHTPS_SY3X00_SPI_CLOCK_READ_WAIT,		TPS_SPI_R_BYTE_DELAY);
SHTPS_PARAM_DEF(SHTPS_SY3X00_SPI_CLOCK_WRITE_WAIT,		TPS_SPI_W_BYTE_DELAY);
SHTPS_PARAM_DEF(SHTPS_SY3X00_SPI_TANSACTION_READ_WAIT,	TPS_SPI_R_TANS_WAIT);
SHTPS_PARAM_DEF(SHTPS_SY3X00_SPI_TANSACTION_WRITE_WAIT,	TPS_SPI_W_TANS_WAIT);
SHTPS_PARAM_DEF(SHTPS_TOUCH_PERFORMANCE_UP_MODE,		1);

/* -----------------------------------------------------------------------------------
 */
#if defined( SHTPS_DRAG_STEP_ENABLE )
	SHTPS_PARAM_DEF( SHTPS_DRAG_STEP_FINGER_ENABLE,			1  );
	SHTPS_PARAM_DEF( SHTPS_DRAG_STEP_PEN_ENABLE,			1  );

	SHTPS_PARAM_DEF( SHTPS_DRAG_DIR_FIX_CNT, 				3  );
	SHTPS_PARAM_DEF( SHTPS_DRAG_THRESH_VAL_X_ZERO, 			4  );
	SHTPS_PARAM_DEF( SHTPS_DRAG_THRESH_VAL_X_1ST, 			8  );
	SHTPS_PARAM_DEF( SHTPS_DRAG_THRESH_VAL_X_2ND, 			1  );
	SHTPS_PARAM_DEF( SHTPS_DRAG_THRESH_VAL_X_1ST_MULTI, 	12 );
	SHTPS_PARAM_DEF( SHTPS_DRAG_THRESH_VAL_X_2ND_MULTI, 	1  );
	SHTPS_PARAM_DEF( SHTPS_DRAG_THRESH_VAL_Y_ZERO, 			4  );
	SHTPS_PARAM_DEF( SHTPS_DRAG_THRESH_VAL_Y_1ST, 			8  );
	SHTPS_PARAM_DEF( SHTPS_DRAG_THRESH_VAL_Y_2ND, 			1  );
	SHTPS_PARAM_DEF( SHTPS_DRAG_THRESH_VAL_Y_1ST_MULTI, 	12 );
	SHTPS_PARAM_DEF( SHTPS_DRAG_THRESH_VAL_Y_2ND_MULTI, 	1  );

	SHTPS_PARAM_DEF( SHTPS_PEN_DRAG_THRESH_VAL_X_ZERO, 		4  );
	SHTPS_PARAM_DEF( SHTPS_PEN_DRAG_THRESH_VAL_X_1ST, 		4  );
	SHTPS_PARAM_DEF( SHTPS_PEN_DRAG_THRESH_VAL_X_2ND, 		1  );
	SHTPS_PARAM_DEF( SHTPS_PEN_DRAG_THRESH_VAL_X_1ST_MULTI, 4  );
	SHTPS_PARAM_DEF( SHTPS_PEN_DRAG_THRESH_VAL_X_2ND_MULTI, 1  );
	SHTPS_PARAM_DEF( SHTPS_PEN_DRAG_THRESH_VAL_Y_ZERO, 		4  );
	SHTPS_PARAM_DEF( SHTPS_PEN_DRAG_THRESH_VAL_Y_1ST, 		4  );
	SHTPS_PARAM_DEF( SHTPS_PEN_DRAG_THRESH_VAL_Y_2ND, 		1  );
	SHTPS_PARAM_DEF( SHTPS_PEN_DRAG_THRESH_VAL_Y_1ST_MULTI, 4  );
	SHTPS_PARAM_DEF( SHTPS_PEN_DRAG_THRESH_VAL_Y_2ND_MULTI, 1  );

	SHTPS_PARAM_DEF( SHTPS_DRAG_THRESH_RETURN_TIME_ZERO, 	250);
	SHTPS_PARAM_DEF( SHTPS_DRAG_THRESH_RETURN_TIME, 		250);
#endif /* SHTPS_DRAG_STEP_ENABLE */

/* -----------------------------------------------------------------------------------
 */
#if defined( CONFIG_SHTPS_SY3000_FACETOUCH_DETECT ) || defined( CONFIG_SHTPS_SY3000_FACETOUCH_OFF_DETECT )
	SHTPS_PARAM_DEF( SHTPS_FINGER_WIDTH_PALMDET, 			15  );
	SHTPS_PARAM_DEF( SHTPS_FINGER_WIDTH_FUZZ, 				0   );
	SHTPS_PARAM_DEF( SHTPS_FINGER_WIDTH_MIN, 				1   );
	SHTPS_PARAM_DEF( SHTPS_FINGER_WIDTH_MAX, 				8   );
	SHTPS_PARAM_DEF( SHTPS_LOS_SINGLE, 						0x05);
	SHTPS_PARAM_DEF( SHTPS_LOS_MULTI, 						0x0D);
#else
	#define SHTPS_FINGER_WIDTH_PALMDET (15)
	#define SHTPS_FINGER_WIDTH_MIN     (1)
#endif /* CONFIG_SHTPS_SY3000_FACETOUCH_DETECT || CONFIG_SHTPS_SY3000_FACETOUCH_OFF_DETECT */

/* -----------------------------------------------------------------------------------
 */
#if defined( SHTPS_CHARGER_ARMOR_ENABLE )
	SHTPS_PARAM_DEF( SHTPS_CHARGER_ARMOR_STRENGTH_DEFAULT, 	0x40);
	SHTPS_PARAM_DEF( SHTPS_CHARGER_ARMOR_STRENGTH, 			0x40);
#endif /* SHTPS_CHARGER_ARMOR_ENABLE */


/* -----------------------------------------------------------------------------------
 */
#if defined(SHTPS_CPU_CLOCK_CONTROL_ENABLE)
	SHTPS_PARAM_DEF( SHTPS_PERF_LOCK_ENABLE_ALLEVENTS, 			1);
	SHTPS_PARAM_DEF( SHTPS_PERF_LOCK_CLOCK_FREQUENCY, 			1248000);
	SHTPS_PARAM_DEF( SHTPS_PERF_LOCK_ENABLE_TIME_MS, 			50);
	SHTPS_PARAM_DEF( SHTPS_PERF_LOCK_ENABLE_TIME_MS_FOR_FLICK, 	2000);
	SHTPS_PARAM_DEF( SHTPS_PERF_LOCK_ENABLE_FLICK_DIST, 		15);

	SHTPS_PARAM_DEF( SHTPS_PERF_LOCK_CLUSTER0_ENABLE,		 			1);
	SHTPS_PARAM_DEF( SHTPS_PERF_LOCK_CLUSTER0_ENABLE_CORE_NUM, 			2);
	SHTPS_PARAM_DEF( SHTPS_PERF_LOCK_CLUSTER0_CLOCK_FREQUENCY, 			844800);
	SHTPS_PARAM_DEF( SHTPS_PERF_LOCK_CLUSTER0_ENABLE_TIME_MS, 			50);
	SHTPS_PARAM_DEF( SHTPS_PERF_LOCK_CLUSTER0_ENABLE_TIME_MS_FOR_FLICK,	50);

	SHTPS_PARAM_DEF( SHTPS_PERF_LOCK_CLUSTER1_ENABLE,		 			1);
	SHTPS_PARAM_DEF( SHTPS_PERF_LOCK_CLUSTER1_ENABLE_CORE_NUM, 			2);
	SHTPS_PARAM_DEF( SHTPS_PERF_LOCK_CLUSTER1_CLOCK_FREQUENCY, 			883200);
	SHTPS_PARAM_DEF( SHTPS_PERF_LOCK_CLUSTER1_ENABLE_TIME_MS, 			50);
	SHTPS_PARAM_DEF( SHTPS_PERF_LOCK_CLUSTER1_ENABLE_TIME_MS_FOR_FLICK, 50);

	SHTPS_PARAM_DEF( SHTPS_PERF_LOCK_QOS_LATENCY_ENABLE, 		1);
	SHTPS_PARAM_DEF( SHTPS_PERF_LOCK_QOS_LATENCY_DEF_VALUE, 	79);

	#if defined(SHTPS_DEF_CTRL_CPU_CLOCK_LINKED_LCD_BRIGHT_ENABLE)
		SHTPS_PARAM_DEF( SHTPS_CTRL_CPU_CLOCK_FOR_LOW_BRIGHTNESS_ENABLE,	0);

		#define SHTPS_PERF_LOCK_CLOCK_FREQUENCY_LCD_LPM		960000
	#endif /* SHTPS_DEF_CTRL_CPU_CLOCK_LINKED_LCD_BRIGHT_ENABLE */
	#if defined(SHTPS_DEF_CTRL_CPU_CLOCK_LINKED_ECO_ENABLE)
		SHTPS_PARAM_DEF( SHTPS_CTRL_CPU_CLOCK_FOR_ECO_ENABLE,	0);
	#endif /* SHTPS_DEF_CTRL_CPU_CLOCK_LINKED_ECO_ENABLE */
#endif /* SHTPS_CPU_CLOCK_CONTROL_ENABLE */


/* -----------------------------------------------------------------------------------
 */
#if defined(SHTPS_HOVER_DETECT_ENABLE)
	#define SHTPS_HOVER_CTRL_BASE_ADR					0x00
	#define SHTPS_HOVER_CTRL_BASE_ADR_A1				0x09
	SHTPS_PARAM_DEF( SHTPS_HOVER_THRESH_FOR_ADC_OLD, 	0x2e);
	SHTPS_PARAM_DEF( SHTPS_HOVER_THRESH_FOR_ADC, 		0x40);
#endif /* SHTPS_HOVER_DETECT_ENABLE */


/* -----------------------------------------------------------------------------------
 */
#if defined(SHTPS_HOVER_DETECT_FAIL_RESOLV_ENABLE)
	#define SHTPS_HOVER_HIST_MAX							10
	#define SHTPS_HOVER_CENTER_HIST_MAX						200
	SHTPS_PARAM_DEF( SHTPS_HOVER_TU_DELAY_TIME_MS, 			0  );
	SHTPS_PARAM_DEF( SHTPS_HOVER_INFO_EFFECT_TIME_MS, 		200);
	SHTPS_PARAM_DEF( SHTPS_HOVER_CENTER_INFO_EFFECT_TIME_MS,200);
	SHTPS_PARAM_DEF( SHTPS_EDGE_HOVER_FAIL_RANGE_X, 		50 );
	SHTPS_PARAM_DEF( SHTPS_EDGE_HOVER_FAIL_RANGE_Y, 		35 );
	SHTPS_PARAM_DEF( SHTPS_HOVER_HIST_COUNT_MAX, 			5  );
	SHTPS_PARAM_DEF( SHTPS_HOVER_IGNORE_WX_MIN, 			-1 );
	SHTPS_PARAM_DEF( SHTPS_HOVER_IGNORE_WX_MAX, 			-1 );
	SHTPS_PARAM_DEF( SHTPS_HOVER_IGNORE_WY_MIN, 			-1 );
	SHTPS_PARAM_DEF( SHTPS_HOVER_IGNORE_WY_MAX, 			-1 );
	SHTPS_PARAM_DEF( SHTPS_HOVER_EDGE_LOST_RESOLV_DISABLE, 	0  );
	SHTPS_PARAM_DEF( hover_debug_log_enable, 				0  );
	SHTPS_PARAM_DEF( stylus_detect_is_hover_event_enable, 	1  );
	SHTPS_PARAM_DEF( hover_report_info_calc_type, 			0  );
#endif /* SHTPS_HOVER_DETECT_FAIL_RESOLV_ENABLE */

/* -----------------------------------------------------------------------------------
 */
#if defined(SHTPS_EDGE_POS_ADJUST_ENABLE)
	SHTPS_PARAM_DEF( SHTPS_EDGE_DISABLE_AREA_OFFSET_X, 	0);
	SHTPS_PARAM_DEF( SHTPS_EDGE_ADJUST_AREA_OFFSET_X, 	0);
	SHTPS_PARAM_DEF( SHTPS_EDGE_DISABLE_AREA_OFFSET_Y, 	0);
	SHTPS_PARAM_DEF( SHTPS_EDGE_ADJUST_AREA_OFFSET_Y, 	0);
#endif /* SHTPS_EDGE_POS_ADJUST_ENABLE */

/* -----------------------------------------------------------------------------------
 */
#if defined(SHTPS_MULTI_HOVER_SELECT_ENABLE)
	SHTPS_PARAM_DEF( SHTPS_MULTI_HOVER_EDGE_FAIL_RANGE_X, 	100);
	SHTPS_PARAM_DEF( SHTPS_MULTI_HOVER_DIFF_THRESH_X, 		150);
#endif /* SHTPS_MULTI_HOVER_SELECT_ENABLE */

/* -----------------------------------------------------------------------------------
 */
#if defined(SHTPS_LPWG_MODE_ENABLE)
	//#define SHTPS_LPWG_F51_REPORT_BEYOND_ACTIVE_AREA_ENABLE
	#define SHTPS_LPWG_REPORT_WG_ONLY						0x02
	#define SHTPS_LPWG_F12_CTRL08_BUFF_SIZE					15
	#define SHTPS_LPWG_F12_CTRL18_BUFF_SIZE					19
	#define SHTPS_LPWG_F12_CTRL27_BUFF_SIZE					7

	#if defined( SHTPS_HOST_LPWG_MODE_ENABLE )
		SHTPS_PARAM_DEF( SHTPS_HOST_LPWG_ENABLE, 				0);
		SHTPS_PARAM_DEF( SHTPS_LPWG_SWIPE_DIST_THRESHOLD, 		300);
		SHTPS_PARAM_DEF( SHTPS_LPWG_SWIPE_CHECK_TIME_MS, 		500);
		SHTPS_PARAM_DEF( SHTPS_HOST_LPWG_HW_REV_CHK_ENABLE, 	0);
	#endif /* SHTPS_HOST_LPWG_MODE_ENABLE */

	#if defined(SHTPS_LPWG_DOUBLE_TAP_ENABLE)
		SHTPS_PARAM_DEF( SHTPS_LPWG_MAXIMUM_TAP_TIME,			0x3C);
		SHTPS_PARAM_DEF( SHTPS_LPWG_MAXIMUM_TAP_DISTANCE,		0x1E);
	#endif /* SHTPS_LPWG_DOUBLE_TAP_ENABLE */

	#if defined(SHTPS_LPWG_CHANGE_SWIPE_DISTANCE_ENABLE)
		SHTPS_PARAM_DEF( SHTPS_LPWG_SWIPE_MINIMUM_DISTANCE, 	0x19);
	#endif /* SHTPS_LPWG_CHANGE_SWIPE_DISTANCE_ENABLE */

	#if defined(SHTPS_LPWG_ALLOWED_SWIPES_ENABLE)
		SHTPS_PARAM_DEF( SHTPS_LPWG_ALLOWED_SWIPES,				0x00);
	#endif /* SHTPS_LPWG_ALLOWED_SWIPES_ENABLE */

	SHTPS_PARAM_DEF( SHTPS_LPWG_ENABLE_GESTURE, 			0x02);
	SHTPS_PARAM_DEF( SHTPS_LPWG_DOZE_INTERVAL_DEF, 			0x01);
	SHTPS_PARAM_DEF( SHTPS_LPWG_DOZE_INTERVAL, 				0x05);
	SHTPS_PARAM_DEF( SHTPS_LPWG_DOZE_WAKEUP_THRESHOLD_DEF, 	0x28);
	SHTPS_PARAM_DEF( SHTPS_LPWG_DOZE_WAKEUP_THRESHOLD, 		0x28);
	SHTPS_PARAM_DEF( SHTPS_LPWG_DOZE_HOLDOFF_DEF, 			0x05);
	SHTPS_PARAM_DEF( SHTPS_LPWG_DOZE_HOLDOFF, 				0x06);
	SHTPS_PARAM_DEF( SHTPS_LPWG_DOZE_HOLDOFF_SWEEP_ON, 		0x00);
	SHTPS_PARAM_DEF( SHTPS_LPWG_DOZE_HOLDOFF_DOUBLE_TAP,	0x06);
	SHTPS_PARAM_DEF( SHTPS_LPWG_DOZE_CTL, 					0x02);
	SHTPS_PARAM_DEF( SHTPS_LPWG_MAX_ACTIVE_DURATION, 		0x01);
	SHTPS_PARAM_DEF( SHTPS_LPWG_MAX_ACTIVE_DURATION_TIME, 	0x05);
	SHTPS_PARAM_DEF( SHTPS_LPWG_REPORT_BEYOND_ACTIVE_AREA, 	0x00);
	SHTPS_PARAM_DEF( SHTPS_LPWG_QOS_LATENCY_DEF_VALUE, 		SHTPS_QOS_LATENCY_DEF_VALUE);
	SHTPS_PARAM_DEF( SHTPS_LPWG_BLOCK_TIME_MAX_MS, 			2000);
	SHTPS_PARAM_DEF( SHTPS_LPWG_MIN_NOTIFY_INTERVAL, 		1000);
	SHTPS_PARAM_DEF( SHTPS_LPWG_MODE_ON_AFTER_SLEEP_ENABLE, 0);
	SHTPS_PARAM_DEF( SHTPS_LPWG_MODE_ON_AFTER_REZERO_ENABLE,0);
	SHTPS_PARAM_DEF( SHTPS_LPWG_DOZE_ENABLE, 				1);
	SHTPS_PARAM_DEF( SHTPS_LPWG_RX_CLIP_AREA_MM,			0);
	SHTPS_PARAM_DEF( SHTPS_LPWG_TX_CLIP_AREA_MM,			3);
	SHTPS_PARAM_DEF( SHTPS_LPWG_CLIP_AREA_X_THRESHOLD_SWEEP_ON,		50);
	SHTPS_PARAM_DEF( SHTPS_LPWG_CLIP_AREA_X_THRESHOLD_DOUBLE_TAP,	180);
	SHTPS_PARAM_DEF( SHTPS_LPWG_CLIP_AREA_Y_THRESHOLD_SWEEP_ON,		0);
	SHTPS_PARAM_DEF( SHTPS_LPWG_CLIP_AREA_Y_THRESHOLD_DOUBLE_TAP,	180);
	SHTPS_PARAM_DEF( SHTPS_LPWG_CLIP_SET_TYPE,				2);
	SHTPS_PARAM_DEF( SHTPS_LPWG_PALM_AREA_VALUE,			0x19);
	SHTPS_PARAM_DEF( SHTPS_LPWG_PALM_FILTER_MODE_VALUE,		0x01);

	#if defined(SHTPS_PROXIMITY_SUPPORT_ENABLE)
		#include <sharp/proximity.h>
		SHTPS_PARAM_DEF( SHTPS_LPWG_PROXIMITY_SUPPORT_ENABLE, 	1);
		SHTPS_PARAM_DEF( SHTPS_LPWG_PROXIMITY_CHECK_ASYNC_ENABLE, 0);
		SHTPS_PARAM_DEF( SHTPS_LPWG_MIN_NOTIFY_CANCEL_INTERVAL, 800);
		SHTPS_PARAM_DEF( SHTPS_LPWG_PROXIMITY_CHECK_PREWAIT, 	100);
	#endif /* SHTPS_PROXIMITY_SUPPORT_ENABLE */
	
	#if defined(SHTPS_LPWG_F51_REPORT_BEYOND_ACTIVE_AREA_ENABLE)
		SHTPS_PARAM_DEF( SHTPS_F51_REPORT_BEYOND_ACTIVE_AREA_ADDR, 	0x0400);
	#endif /* SHTPS_LPWG_F51_REPORT_BEYOND_ACTIVE_AREA_ENABLE */

	#if defined(SHTPS_LPWG_GRIP_SUPPORT_ENABLE)
		SHTPS_PARAM_DEF( SHTPS_PRM_LPWG_GRIP_OFF_TPS_RESET_ENABLE,	0);
	#endif /* SHTPS_LPWG_GRIP_SUPPORT_ENABLE */
#endif /* SHTPS_LPWG_MODE_ENABLE */

/* -----------------------------------------------------------------------------------
 */
#if defined(SHTPS_PHYSICAL_KEY_ENABLE)
	#if defined(SHTPS_PROXIMITY_SUPPORT_ENABLE)
		#include <sharp/proximity.h>
		SHTPS_PARAM_DEF( SHTPS_KEY_PROXIMITY_SUPPORT_ENABLE, 	1);
	#endif /* SHTPS_PROXIMITY_SUPPORT_ENABLE */
	#if defined(SHTPS_PHYSICAL_KEY_SET_THRESH_ENABLE)
		SHTPS_PARAM_DEF( SHTPS_PHYSICAL_KEY_TOUCH_THRESHOLD, 	0x41);
	#endif /*SHTPS_PHYSICAL_KEY_SET_THRESH_ENABLE*/

#endif /* SHTPS_PHYSICAL_KEY_ENABLE */

/* -----------------------------------------------------------------------------------
 */
#if defined(SHTPS_FINGER_KEY_EXCLUDE_ENABLE)
	SHTPS_PARAM_DEF( SHTPS_KEY_DISABLE_EFFECT_AREA, 	100);
	SHTPS_PARAM_DEF( SHTPS_KEY_DISABLE_TIME_MS, 		200);
	SHTPS_PARAM_DEF( SHTPS_TOUCH_DISABLE_TIME_MS, 		200);
#endif /* SHTPS_FINGER_KEY_EXCLUDE_ENABLE */

/* -----------------------------------------------------------------------------------
 */
#if defined(SHTPS_FORCECAL_AFTER_HOVERSETTING_ENABLE)
	SHTPS_PARAM_DEF( SHTPS_FORCECAL_AFTER_HOVERSETTING_WAIT, 20);
#endif /* SHTPS_FORCECAL_AFTER_HOVERSETTING_ENABLE */

/* -----------------------------------------------------------------------------------
 */
#if defined( SHTPS_FINGER_ABSORPTION_PROVISION_ENABLE )
	SHTPS_PARAM_DEF( SHTPS_FINGER_ABSORPTION_DIST_THRESHOLD,	400);
	SHTPS_PARAM_DEF( SHTPS_FINGER_ABSORPTION_HOLD_TIME_MS,		200);

	#if defined(SHTPS_PINCHOUT_FAIL_FLICK_RESOLV_ENABLE)
		SHTPS_PARAM_DEF( SHTPS_PINCHOUT_FAIL_FLICK_RESOLV_DISABLE,	0);
		SHTPS_PARAM_DEF( SHTPS_PINCHOUT_DIST_THRESHOLD,				50);
		SHTPS_PARAM_DEF( SHTPS_PINCHOUT_HOLD_TIME_MS,				100);
	#endif /* SHTPS_PINCHOUT_FAIL_FLICK_RESOLV_ENABLE */
#endif /* SHTPS_FINGER_ABSORPTION_PROVISION_ENABLE */


/* -----------------------------------------------------------------------------------
 */
#if defined(SHTPS_CLING_REJECTION_ENABLE)
	SHTPS_PARAM_DEF( SHTPS_CLING_REJECT_HOVER_ENABLE,					1);
	SHTPS_PARAM_DEF( SHTPS_CLING_REJECT_FINGER_ENABLE,					1);

	SHTPS_PARAM_DEF( SHTPS_CLING_REJECT_HOVER_ANCHOR_AREA_X,			200);
	SHTPS_PARAM_DEF( SHTPS_CLING_REJECT_HOVER_ANCHOR_AREA_Y,			200);
	SHTPS_PARAM_DEF( SHTPS_CLING_REJECT_HOVER_ANCHOR_CNT_MAX,			100);
	SHTPS_PARAM_DEF( SHTPS_CLING_REJECT_HOVER_BASE_POS_CHANGE_TIME,		100);
	SHTPS_PARAM_DEF( SHTPS_CLING_REJECT_HOVER_REST_TIME,				1000);
	SHTPS_PARAM_DEF( SHTPS_CLING_REJECT_HOVER_LEVEL_JUMP_THRESH_X,		200);
	SHTPS_PARAM_DEF( SHTPS_CLING_REJECT_HOVER_LEVEL_JUMP_AREA_Y,		100);
	SHTPS_PARAM_DEF( SHTPS_CLING_REJECT_HOVER_LEVEL_JUMP_CNT_MAX,		20);
	SHTPS_PARAM_DEF( SHTPS_CLING_REJECT_HOVER_RIOT_JUMP_THRESH_X,		200);
	SHTPS_PARAM_DEF( SHTPS_CLING_REJECT_HOVER_RIOT_JUMP_THRESH_Y,		200);
	SHTPS_PARAM_DEF( SHTPS_CLING_REJECT_HOVER_RIOT_JUMP_CNT_MAX,		30);
	SHTPS_PARAM_DEF( SHTPS_CLING_REJECT_FINGER_TU_HOVER_TD_TIME,		100);
	SHTPS_PARAM_DEF( SHTPS_CLING_REJECT_FINGER_TU_HOVER_TD_DISTANCE_X,	600);
	SHTPS_PARAM_DEF( SHTPS_CLING_REJECT_FINGER_TU_HOVER_TD_DISTANCE_Y,	700);

	SHTPS_PARAM_DEF( SHTPS_CLING_REJECT_HOVER_MODE_1_ENABLE, 			0);
	SHTPS_PARAM_DEF( SHTPS_CLING_REJECT_HOVER_MODE_2_ENABLE, 			1);
	SHTPS_PARAM_DEF( SHTPS_CLING_REJECT_HOVER_MODE_3_ENABLE, 			1);
	SHTPS_PARAM_DEF( SHTPS_CLING_REJECT_HOVER_MODE_4_ENABLE, 			1);

	SHTPS_PARAM_DEF( SHTPS_CLING_REJECT_FINGER_DETECT_THRESH_W,			60);
	SHTPS_PARAM_DEF( SHTPS_CLING_REJECT_FINGER_JUMP_THRESH_X, 			200);
	SHTPS_PARAM_DEF( SHTPS_CLING_REJECT_FINGER_JUMP_THRESH_Y, 			200);
	SHTPS_PARAM_DEF( SHTPS_CLING_REJECT_FINGER_DETECT_THRESH_DIFF_W, 	50);
	SHTPS_PARAM_DEF( SHTPS_CLING_REJECT_FINGER_DETECT_THRESH_DIFF_Z, 	30);
	SHTPS_PARAM_DEF( SHTPS_CLING_REJECT_FINGER_JUMP_CNT_MAX, 			10);
	SHTPS_PARAM_DEF( SHTPS_CLING_REJECT_FINGER_TU_NEGLECT_TIME_MS, 		100);
	SHTPS_PARAM_DEF( SHTPS_CLING_REJECT_FINGER_STATIC_NUM_THRESH, 		3);
	SHTPS_PARAM_DEF( SHTPS_CLING_REJECT_FINGER_STATIC_TIME_MS,			1000);
	SHTPS_PARAM_DEF( SHTPS_CLING_REJECT_FINGER_STATIC_DIFF_W,			1);
	SHTPS_PARAM_DEF( SHTPS_CLING_REJECT_FINGER_STATIC_DIFF_Z,			1);

	SHTPS_PARAM_DEF( SHTPS_CLING_REJECT_FINGER_MODE_1_ENABLE, 			0);
	SHTPS_PARAM_DEF( SHTPS_CLING_REJECT_FINGER_MODE_2_ENABLE, 			1);
	SHTPS_PARAM_DEF( SHTPS_CLING_REJECT_FINGER_MODE_3_ENABLE, 			1);
	SHTPS_PARAM_DEF( SHTPS_CLING_REJECT_FINGER_MODE_4_ENABLE, 			0);

	#if defined( SHTPS_LOG_DEBUG_ENABLE )
		SHTPS_PARAM_DEF( SHTPS_CLING_REJECT_LOG_ENABLE, 0);
		#define	SHTPS_LOG_CLING_REJECT(...)									\
			if(SHTPS_CLING_REJECT_LOG_ENABLE != 0){							\
				printk(KERN_DEBUG "[shtps] [cling_reject]" __VA_ARGS__);	\
			}
	#else
		#define	SHTPS_LOG_CLING_REJECT(...)
	#endif /* SHTPS_LOG_DEBUG_ENABLE */
#endif /* SHTPS_CLING_REJECTION_ENABLE */

/* -----------------------------------------------------------------------------------
 */
#if defined(SHTPS_HOVER_HOST_JITTER_FILTER_ENABLE)
	SHTPS_PARAM_DEF( SHTPS_HOVER_JITTER_FILTER_DISABLE,			0);
	SHTPS_PARAM_DEF( SHTPS_HOVER_JITTER_FILTER_THRESHOLD,		15);
	SHTPS_PARAM_DEF( SHTPS_HOVER_JITTER_FILTER_JUMP_THRESHOLD,	30);
	SHTPS_PARAM_DEF( SHTPS_HOVER_JITTER_FILTER_JUMP_COUNT,		5);
#endif /* SHTPS_HOVER_HOST_JITTER_FILTER_ENABLE */

/* -----------------------------------------------------------------------------------
 */
#if defined( SHTPS_FINGER_WIDTH_MODERATION_ENABLE )
	SHTPS_PARAM_DEF( SHTPS_FINGER_WIDTH_MODERATION_DISABLE,		0);
	SHTPS_PARAM_DEF( SHTPS_FINGER_WIDTH_GAIN_THRESHOLD,			10);
	SHTPS_PARAM_DEF( SHTPS_FINGER_WIDTH_MODERATION_RATIO,		5);
#endif	/* SHTPS_FINGER_WIDTH_MODERATION_ENABLE */

/* -----------------------------------------------------------------------------------
 */
#if defined(SHTPS_EDGE_FAIL_TOUCH_REJECTION_ENABLE)
	SHTPS_PARAM_DEF( SHTPS_EDGE_FAIL_TOUCH_REJECT_ENABLE,			1);
	SHTPS_PARAM_DEF( SHTPS_EDGE_FAIL_TOUCH_REJECT_AREA_THRESH_X,	34);
	SHTPS_PARAM_DEF( SHTPS_EDGE_FAIL_TOUCH_REJECT_AREA_THRESH_Y,	886);
	SHTPS_PARAM_DEF( SHTPS_EDGE_FAIL_TOUCH_REJECT_DISTANCE,			537);
	SHTPS_PARAM_DEF( SHTPS_EDGE_FAIL_TOUCH_REJECT_Z_RATIO,			82);
	SHTPS_PARAM_DEF( SHTPS_EDGE_FAIL_TOUCH_REJECT_Z_RATIO_2,		130);
	SHTPS_PARAM_DEF( SHTPS_EDGE_FAIL_TOUCH_REJECT_EFFECT_TIME,		946);
	SHTPS_PARAM_DEF( SHTPS_EDGE_FAIL_TOUCH_REJECT_CANCEL_AREA_THRESH_X,	39);

	SHTPS_PARAM_DEF( SHTPS_EDGE_FAIL_TOUCH_REJECT_TOP_ENABLE,				0);
	SHTPS_PARAM_DEF( SHTPS_EDGE_FAIL_TOUCH_REJECT_TOP_AREA_TOP_ENABLE,		0);
	SHTPS_PARAM_DEF( SHTPS_EDGE_FAIL_TOUCH_REJECT_TOP_AREA_THRESH_X,		0);
	SHTPS_PARAM_DEF( SHTPS_EDGE_FAIL_TOUCH_REJECT_TOP_AREA_THRESH_Y,		0);

	SHTPS_PARAM_DEF( SHTPS_EDGE_FAIL_TOUCH_REJECT_TOP_AREA_SIDE_ENABLE,		0);
	SHTPS_PARAM_DEF( SHTPS_EDGE_FAIL_TOUCH_REJECT_TOP_SIDE_AREA_THRESH_X,	34);
	SHTPS_PARAM_DEF( SHTPS_EDGE_FAIL_TOUCH_REJECT_TOP_SIDE_AREA_THRESH_Y,	55);
	SHTPS_PARAM_DEF( SHTPS_EDGE_FAIL_TOUCH_REJECT_TOP_SIDE_AREA_INHIBIT_CANCEL_MOVE_THRESH_Y,	97);

	SHTPS_PARAM_DEF( SHTPS_EDGE_FAIL_TOUCH_REJECT_TOP_AREA_THRESH_Z,			0);
	SHTPS_PARAM_DEF( SHTPS_EDGE_FAIL_TOUCH_REJECT_TOP_AREA_THRESH_ZW_RATIO,		170);
	SHTPS_PARAM_DEF( SHTPS_EDGE_FAIL_TOUCH_REJECT_TOP_AREA_RELATION_ZW_RATIO,	65);
	SHTPS_PARAM_DEF( SHTPS_EDGE_FAIL_TOUCH_REJECT_TOP_AREA_RELATION_ZW_DIFF,	19);
	SHTPS_PARAM_DEF( SHTPS_EDGE_FAIL_TOUCH_REJECT_TOP_AREA_RELATION_ZWY_RATIO,	280);
	SHTPS_PARAM_DEF( SHTPS_EDGE_FAIL_TOUCH_REJECT_TOP_AREA_RELATION_ZWY_DIFF,	8600);

	SHTPS_PARAM_DEF( SHTPS_EDGE_FAIL_TOUCH_REJECT_BOTTOM_ENABLE,				0);
	SHTPS_PARAM_DEF( SHTPS_EDGE_FAIL_TOUCH_REJECT_BOTTOM_AREA_SIDE_ENABLE,		1);
	SHTPS_PARAM_DEF( SHTPS_EDGE_FAIL_TOUCH_REJECT_BOTTOM_SIDE_AREA_THRESH_X,	10);
	SHTPS_PARAM_DEF( SHTPS_EDGE_FAIL_TOUCH_REJECT_BOTTOM_SIDE_AREA_THRESH_Y,	542);
	SHTPS_PARAM_DEF( SHTPS_EDGE_FAIL_TOUCH_REJECT_BOTTOM_SIDE_AREA_INHIBIT_CANCEL_MOVE_THRESH_Y,	0);

	SHTPS_PARAM_DEF( SHTPS_EDGE_FAIL_TOUCH_REJECT_BOTTOM_AREA_RELATION_ZW_RATIO,	0);
	SHTPS_PARAM_DEF( SHTPS_EDGE_FAIL_TOUCH_REJECT_BOTTOM_AREA_RELATION_ZW_DIFF,		19);
	SHTPS_PARAM_DEF( SHTPS_EDGE_FAIL_TOUCH_REJECT_BOTTOM_AREA_RELATION_ZWY_RATIO,	86);
	SHTPS_PARAM_DEF( SHTPS_EDGE_FAIL_TOUCH_REJECT_BOTTOM_AREA_RELATION_ZWY_DIFF,	55);

	SHTPS_PARAM_DEF( SHTPS_EDGE_FAIL_TOUCH_REJECT_SIDE_ENABLE,					1);
	SHTPS_PARAM_DEF( SHTPS_EDGE_FAIL_TOUCH_REJECT_SIDE_AREA_THRESH_X,			10);
	SHTPS_PARAM_DEF( SHTPS_EDGE_FAIL_TOUCH_REJECT_SIDE_AREA_THRESH_ZW_RATIO,	0);
	SHTPS_PARAM_DEF( SHTPS_EDGE_FAIL_TOUCH_REJECT_SIDE_AREA_THRESH_ZWY_RATIO,	241);
	SHTPS_PARAM_DEF( SHTPS_EDGE_FAIL_TOUCH_REJECT_SIDE_AREA_THRESH_W,			0);
	SHTPS_PARAM_DEF( SHTPS_EDGE_FAIL_TOUCH_REJECT_SIDE_AREA_THRESH_WY,			30);
	SHTPS_PARAM_DEF( SHTPS_EDGE_FAIL_TOUCH_REJECT_SIDE_AREA_THRESH_Z,			0);

	#if defined( SHTPS_LOG_DEBUG_ENABLE )
		SHTPS_PARAM_DEF( SHTPS_EDGE_FAIL_TOUCH_REJECT_LOG_ENABLE, 0);
	    #define	SHTPS_LOG_DBG_EDGE_FAIL_TOUCH_PRINT(...)						\
	        if(SHTPS_EDGE_FAIL_TOUCH_REJECT_LOG_ENABLE != 0){					\
	            printk(KERN_DEBUG "[shtps] [edge_fail_reject]" __VA_ARGS__);	\
	        }
	#else
		#define	SHTPS_LOG_DBG_EDGE_FAIL_TOUCH_PRINT(...)
	#endif /* SHTPS_LOG_DEBUG_ENABLE */
#endif /* SHTPS_EDGE_FAIL_TOUCH_REJECTION_ENABLE */

/* -----------------------------------------------------------------------------------
 */
#if defined( SHTPS_TOUCHKEY_FAIL_TOUCH_REJECTION_ENABLE )
	SHTPS_PARAM_DEF( SHTPS_TOUCHKEY_FAIL_TOUCH_REJECTION_DISABLE, 0);
#endif /* SHTPS_TOUCHKEY_FAIL_TOUCH_REJECTION_ENABLE */

/* -----------------------------------------------------------------------------------
 */
#if defined(SHTPS_GUARANTEE_SPI_ACCESS_IN_WAKE_ENABLE)
	SHTPS_PARAM_DEF( SHTPS_SUSPEND_SPI_RESUME_FUNC_DELAY, 0);
#endif /* SHTPS_GUARANTEE_SPI_ACCESS_IN_WAKE_ENABLE */

/* -----------------------------------------------------------------------------------
 */
#if defined(SHTPS_WAKEUP_FAIL_TOUCH_EVENT_REJECTION_ENABLE)
	SHTPS_PARAM_DEF( SHTPS_WAKEUP_FAIL_TOUCH_EVENT_REJECT_REZERO_ENABLE, 1);
	
	#if defined( SHTPS_LOG_DEBUG_ENABLE )
		SHTPS_PARAM_DEF( SHTPS_WAKEUP_FAIL_TOUCH_EVENT_REJECT_LOG_ENABLE,    0);
		#define	SHTPS_LOG_WAKEUP_FAIL_TOUCH_EVENT_REJECT(...)					\
			if(SHTPS_WAKEUP_FAIL_TOUCH_EVENT_REJECT_LOG_ENABLE != 0){			\
				printk(KERN_DEBUG "[shtps] [wakeup_fail_event]" __VA_ARGS__);	\
			}
	#else
		#define	SHTPS_LOG_WAKEUP_FAIL_TOUCH_EVENT_REJECT(...)
	#endif /* SHTPS_LOG_DEBUG_ENABLE */
#endif /* SHTPS_WAKEUP_FAIL_TOUCH_EVENT_REJECTION_ENABLE */

/* -----------------------------------------------------------------------------------
 */
#if defined( SHTPS_KEY_PROXIMITY_ASYNC_CHECK_ENABLE )
	SHTPS_PARAM_DEF( SHTPS_KEY_PROXIMITY_DOWN_HOLD_TIME_MS, 500);
#endif /* SHTPS_KEY_PROXIMITY_ASYNC_CHECK_ENABLE */

/* -----------------------------------------------------------------------------------
 */
#if defined(SHTPS_GRIP_FAIL_TOUCH_REJECTION_ENABLE)
	SHTPS_PARAM_DEF( SHTPS_GRIP_FAIL_TOUCH_REJECT_ENABLE, 		0);
	SHTPS_PARAM_DEF( SHTPS_GRIP_FAIL_TOUCH_REJECT_AREA, 		350);
	SHTPS_PARAM_DEF( SHTPS_GRIP_FAIL_TOUCH_REJECT_W_THRESH_MIN, 8);
	SHTPS_PARAM_DEF( SHTPS_GRIP_FAIL_TOUCH_REJECT_W_THRESH_MAX, 18);
	SHTPS_PARAM_DEF( SHTPS_GRIP_FAIL_TOUCH_REJECT_Z_THRESH, 	60);
	SHTPS_PARAM_DEF( SHTPS_GRIP_FAIL_TOUCH_REJECT_W_THRESH, 	30);

	SHTPS_PARAM_DEF( SHTPS_GRIP_FAIL_FLICK_REJECT_ENABLE, 			1);
	SHTPS_PARAM_DEF( SHTPS_GRIP_FAIL_FLICK_REJECT_AREA, 			30);
	SHTPS_PARAM_DEF( SHTPS_GRIP_FAIL_FLICK_REJECT_W_THRESH, 		0);
	SHTPS_PARAM_DEF( SHTPS_GRIP_FAIL_FLICK_REJECT_ZW_RATIO_THRESH, 	235);
	SHTPS_PARAM_DEF( SHTPS_GRIP_FAIL_FLICK_REJECT_DIST, 			350);

	#if defined( SHTPS_LOG_DEBUG_ENABLE )
		SHTPS_PARAM_DEF( SHTPS_GRIP_FAIL_TOUCH_REJECT_LOG_ENABLE, 0);
	    #define	SHTPS_LOG_DBG_GRIP_FAIL_TOUCH_PRINT(...)						\
	        if(SHTPS_GRIP_FAIL_TOUCH_REJECT_LOG_ENABLE != 0){					\
	            printk(KERN_DEBUG "[shtps] [grip_fail_reject]" __VA_ARGS__);	\
	        }
	#else
		#define	SHTPS_LOG_DBG_GRIP_FAIL_TOUCH_PRINT(...)
	#endif /* SHTPS_LOG_DEBUG_ENABLE */
#endif /* SHTPS_GRIP_FAIL_TOUCH_REJECTION_ENABLE */

/* -----------------------------------------------------------------------------------
 */
#if defined( SHTPS_DIAGONAL_GHOST_CHECK_ENABLE )
	SHTPS_PARAM_DEF( SHTPS_DIAGONAL_GHOST_CHECK_AREA, 				50);
	SHTPS_PARAM_DEF( SHTPS_DIAGONAL_GHOST_Z_THRESHOLD, 				255);
	SHTPS_PARAM_DEF( SHTPS_DIAGONAL_GHOST_TIMEOUT, 					500);
	SHTPS_PARAM_DEF( SHTPS_DIAGONAL_GHOST_CHECK_AFTER_TU_ENABLE, 	0);
#endif	/* SHTPS_DIAGONAL_GHOST_CHECK_ENABLE */

/* -----------------------------------------------------------------------------------
 */
#if defined(SHTPS_GHOST_REJECTION_ENABLE)
	SHTPS_PARAM_DEF( SHTPS_HOST_GHOST_REJECTION_ENABLE, 			0);
	SHTPS_PARAM_DEF( SHTPS_GHOST_THRESHOLD, 						30);
	SHTPS_PARAM_DEF( SHTPS_GHOST_CHECK_TOUCH_NUM_THRESH,		 	3);
#endif /* SHTPS_GHOST_REJECTION_ENABLE */

/* -----------------------------------------------------------------------------------
 */
#if defined( SHTPS_DRAG_SMOOTH_ENABLE )
	#define SHTPS_DRAG_HISTORY_SIZE_MAX 30
	SHTPS_PARAM_DEF( SHTPS_DRAG_SMOOTH,								1);
	SHTPS_PARAM_DEF( SHTPS_DRAG_SMOOTH_USE_HULL,					1);
	SHTPS_PARAM_DEF( SHTPS_DRAG_SMOOTH_HULL_MULTI,					1);
	SHTPS_PARAM_DEF( SHTPS_DRAG_SMOOTH_HULL_LEAVE_MAX_DOT,			70);
	SHTPS_PARAM_DEF( SHTPS_DRAG_SMOOTH_HULL_COUNT,					15);
	SHTPS_PARAM_DEF( SHTPS_DRAG_SMOOTH_HULL_HIGH_SPEED_RATIO,		5);
	SHTPS_PARAM_DEF( SHTPS_DRAG_SMOOTH_HULL_LOW_SPEED_RATIO,		5);
	SHTPS_PARAM_DEF( SHTPS_DRAG_SMOOTH_HULL_RATIO_CHANGE_THRESHOLD,	15);
	SHTPS_PARAM_DEF( SHTPS_DRAG_SMOOTH_HULL_CANCEL_JUDGE_AREA,		30);
	SHTPS_PARAM_DEF( SHTPS_DRAG_SMOOTH_HULL_CANCEL_THRESHOLD,		3);

	SHTPS_PARAM_DEF( SHTPS_DRAG_SMOOTH_EXCLUDE_DOT,					13);
	SHTPS_PARAM_DEF( SHTPS_DRAG_SMOOTH_EXCLUDE_DOT_HIGH_REPORT_RATE,10);
	SHTPS_PARAM_DEF( SHTPS_DRAG_SMOOTH_SLOW_JUDGE_COUNT,			15);
	SHTPS_PARAM_DEF( SHTPS_DRAG_SMOOTH_INIT_JUDGE_TIME_MS,			1000);

	SHTPS_PARAM_DEF( SHTPS_DRAG_SMOOTH_LEAVE_MAX_DOT,				10);
	SHTPS_PARAM_DEF( SHTPS_DRAG_SMOOTH_COUNT_MIN,					5);
	SHTPS_PARAM_DEF( SHTPS_DRAG_SMOOTH_COUNT_MAX,					10);
	SHTPS_PARAM_DEF( SHTPS_DRAG_SMOOTH_COUNT_UP_STEP,				5);

	SHTPS_PARAM_DEF( SHTPS_DRAG_SMOOTH_FIXED_SHIFT, 				8);
	#define SHTPS_DRAG_SMOOTH_INT_TO_FIXED(val)			((val) << SHTPS_DRAG_SMOOTH_FIXED_SHIFT)
	#define SHTPS_DRAG_SMOOTH_FIXED_TO_INT(val)			((val) >> SHTPS_DRAG_SMOOTH_FIXED_SHIFT)

	#if defined( SHTPS_LOG_DEBUG_ENABLE )
		SHTPS_PARAM_DEF( SHTPS_DRAG_SMOOTH_LOG_ENABLE,				0);
		#define	SHTPS_LOG_DRAG_SMOOTH(...)									\
			if(SHTPS_DRAG_SMOOTH_LOG_ENABLE != 0){							\
				printk(KERN_DEBUG "[shtps] [drag_smooth]" __VA_ARGS__);	\
			}
	#else
		#define	SHTPS_LOG_DRAG_SMOOTH(...)
	#endif /* SHTPS_LOG_DEBUG_ENABLE */
#endif /* SHTPS_DRAG_SMOOTH_ENABLE */

/* -----------------------------------------------------------------------------------
 */
#if defined( SHTPS_DRAG_SMOOTH_FLATTERY_ENABLE )
	#define SHTPS_DRAG_FLATTERY_HISTORY_SIZE_MAX		30
	SHTPS_PARAM_DEF( SHTPS_DRAG_SMOOTH_FLATTERY,									1);
	SHTPS_PARAM_DEF( SHTPS_DRAG_SMOOTH_FLATTERY_SMOOTH_SAMPLE_COUNT,				10);
	SHTPS_PARAM_DEF( SHTPS_DRAG_SMOOTH_FLATTERY_LEAVE_MAX_DOT,						30);
	SHTPS_PARAM_DEF( SHTPS_DRAG_SMOOTH_FLATTERY_WEIGHTED_MOVING_AVE_DENOMINATOR,	34);
	SHTPS_PARAM_DEF( SHTPS_DRAG_SMOOTH_FLATTERY_WEIGHTED_MOVING_AVE_DENOMINATOR_HIGH_REPORT_RATE,	31);
	SHTPS_PARAM_DEF( SHTPS_DRAG_SMOOTH_FLATTERY_RATIO,								34);
	SHTPS_PARAM_DEF( SHTPS_DRAG_SMOOTH_FLATTERY_RATIO_HIGH_REPORT_RATE,				31);
	SHTPS_PARAM_DEF( SHTPS_DRAG_SMOOTH_FLATTERY_EXCLUDE_DOT,						0);
	SHTPS_PARAM_DEF( SHTPS_DRAG_SMOOTH_FLATTERY_EXCLUDE_DOT_HIGH_REPORT_RATE,		0);
	SHTPS_PARAM_DEF( SHTPS_DRAG_SMOOTH_FLATTERY_EXCLUDE_DOT_LOW_REPORT_RATE,		0);
	#if defined( SHTPS_LOG_DEBUG_ENABLE )
		SHTPS_PARAM_DEF( SHTPS_DRAG_SMOOTH_FLATTERY_LOG_ENABLE,				0);
		#define	SHTPS_LOG_DRAG_SMOOTH_FLATTERY(...)							\
			if(SHTPS_DRAG_SMOOTH_FLATTERY_LOG_ENABLE != 0){					\
				printk(KERN_DEBUG "[shtps] [drag_smooth_flattery]" __VA_ARGS__);	\
			}
	#else
		#define	SHTPS_LOG_DRAG_SMOOTH_FLATTERY(...)
	#endif /* SHTPS_LOG_DEBUG_ENABLE */
#endif /* SHTPS_DRAG_SMOOTH_FLATTERY_ENABLE */

/* -----------------------------------------------------------------------------------
 */
#if defined(SHTPS_SHIFT_EDGE_INWARD_ENABLE)
	SHTPS_PARAM_DEF( SHTPS_SHIFT_EDGE_INWARD, 						1);
	SHTPS_PARAM_DEF( SHTPS_SHIFT_EDGE_INWARD_OFFSET, 				5);
#endif /* SHTPS_SHIFT_EDGE_INWARD_ENABLE */

/* -----------------------------------------------------------------------------------
 */
#if defined(SHTPS_PEN_DETECT_ENABLE)
	#define	SHTPS_PEN_ENABLE_F51_REG_ADDR_1				0x0454
	#define	SHTPS_PEN_ENABLE_F51_REG_ADDR_2				0x0455
	#define	SHTPS_PEN_ENABLE_F51_PARAM_ENABLE			0x00
	#define	SHTPS_PEN_ENABLE_F51_PARAM_DISABLE			0x00
#endif /* #if defined(SHTPS_PEN_DETECT_ENABLE) */

/* -----------------------------------------------------------------------------------
 */
#if defined( SHTPS_DYNAMIC_RESET_CONTROL_ENABLE )
	SHTPS_PARAM_DEF( SHTPS_DYNAMIC_RESET_F54_COMMAND_ENABLE,		1);
	SHTPS_PARAM_DEF( SHTPS_DYNAMIC_RESET_COAXIAL_PEN_ENABLE,		0);
	SHTPS_PARAM_DEF( SHTPS_DYNAMIC_RESET_COAXIAL_PEN_TOUCH_COUNT,	20);
	SHTPS_PARAM_DEF( SHTPS_DYNAMIC_RESET_WHEN_WAKEUP_REZERO_ENABLE,	1);

	#if defined( SHTPS_LOG_DEBUG_ENABLE )
		SHTPS_PARAM_DEF( SHTPS_DYNAMIC_RESET_LOG_ENABLE,			0);
		#define	SHTPS_LOG_DYNAMIC_RESET(...)								\
			if(SHTPS_DYNAMIC_RESET_LOG_ENABLE != 0){						\
				printk(KERN_DEBUG "[shtps] [dynamic_reset]" __VA_ARGS__);	\
			}
	#else
		#define	SHTPS_LOG_DYNAMIC_RESET(...)
	#endif /* SHTPS_LOG_DEBUG_ENABLE */
#endif /* SHTPS_DYNAMIC_RESET_CONTROL_ENABLE */

/* -----------------------------------------------------------------------------------
 */
#if defined( SHTPS_LGM_SPLIT_TOUCH_COMBINING_ENABLE )
	#define SHTPS_LGM_SPLIT_TOUCH_COMBINE_POS_HIST_CNT					3
	
	SHTPS_PARAM_DEF( SHTPS_LGM_SPLIT_TOUCH_COMBINE_ENABLE, 				1);
	SHTPS_PARAM_DEF( SHTPS_LGM_SPLIT_TOUCH_COMBINE_DIST_THRESH,			200);
	SHTPS_PARAM_DEF( SHTPS_LGM_SPLIT_TOUCH_COMBINE_DIST_THRESH_RATIO,	200);
	SHTPS_PARAM_DEF( SHTPS_LGM_SPLIT_TOUCH_COMBINE_TIME_THRESH, 		20);

	#if defined( SHTPS_LOG_DEBUG_ENABLE )
		SHTPS_PARAM_DEF( SHTPS_LGM_SPLIT_TOUCH_COMBINE_LOG_ENABLE, 0);
		#define	SHTPS_LOG_LGM_SPLIT_TOUCH_COMBINE(...)					\
			if(SHTPS_LGM_SPLIT_TOUCH_COMBINE_LOG_ENABLE != 0){			\
				printk(KERN_DEBUG "[shtps] [lgm split]" __VA_ARGS__);	\
			}
	#else
		#define	SHTPS_LOG_LGM_SPLIT_TOUCH_COMBINE(...)
	#endif /* SHTPS_LOG_DEBUG_ENABLE */

#endif /* SHTPS_LGM_SPLIT_TOUCH_COMBINING_ENABLE */

/* -----------------------------------------------------------------------------------
 */
#if defined(SHTPS_REPORT_TOOL_TYPE_LOCK_ENABLE)
	SHTPS_PARAM_DEF( SHTPS_HOST_EVENT_TOOL_TYPE_LOCK_ENABLE, 		1);
#endif /* SHTPS_REPORT_TOOL_TYPE_LOCK_ENABLE */

/* -----------------------------------------------------------------------------------
 */
#if defined(SHTPS_PEN_SCREEN_EDGE_DISABLE)
	SHTPS_PARAM_DEF( SHTPS_HOST_EVENT_BLOCK_EDGE_PEN_ENABLE, 	1);
	SHTPS_PARAM_DEF( SHTPS_PEN_EDGE_DISABLE_RANGE_X, 			20);
	SHTPS_PARAM_DEF( SHTPS_PEN_EDGE_DISABLE_RANGE_Y, 			0);
#endif /* SHTPS_PEN_SCREEN_EDGE_DISABLE */

/* -----------------------------------------------------------------------------------
 */
#if defined( SHTPS_MULTITOUCH_PEN_GHOST_REJECTION_ENABLE )
	SHTPS_PARAM_DEF( SHTPS_MULTITOUCH_PEN_GHOST_REJECTION, 			0);
	SHTPS_PARAM_DEF( SHTPS_MULTITOUCH_PEN_GHOST_Z_THRESHOLD_MIN, 	9);
	SHTPS_PARAM_DEF( SHTPS_MULTITOUCH_PEN_GHOST_Z_THRESHOLD_MAX, 	50);
#endif	/* SHTPS_MULTITOUCH_PEN_GHOST_REJECTION_ENABLE */

/* -----------------------------------------------------------------------------------
 */
#if defined( SHTPS_HOVER_REJECT_ENABLE )
	SHTPS_PARAM_DEF( SHTPS_HOST_HOVER_DETECT_REJECTION_ENABLE, 					0);
	SHTPS_PARAM_DEF( SHTPS_HOVER_REJECT_EDGE_AREA, 								60);
	SHTPS_PARAM_DEF( SHTPS_HOVER_REJECT_PEN_TD_MOVE_THRESH, 					30);
	SHTPS_PARAM_DEF( SHTPS_HOVER_REJECT_1_PEN_CHATT_CNT, 						4);
	SHTPS_PARAM_DEF( SHTPS_HOVER_REJECT_1_PEN_CHATT_Z_THRESHOLD_MIN,			12);
	SHTPS_PARAM_DEF( SHTPS_HOVER_REJECT_1_PEN_CHATT_Z_THRESHOLD_MAX,			29);
	SHTPS_PARAM_DEF( SHTPS_HOVER_REJECT_1_PEN_CHATT_TAP_CNT,					4);
	SHTPS_PARAM_DEF( SHTPS_HOVER_REJECT_2_FINGER_Z_THRESHOLD, 					30);
	SHTPS_PARAM_DEF( SHTPS_HOVER_REJECT_3_1_Z_THRESHOLD, 						2);
	SHTPS_PARAM_DEF( SHTPS_HOVER_REJECT_3_1_IGNORE_TIME, 						30);
	SHTPS_PARAM_DEF( SHTPS_HOVER_REJECT_3_2_Z_THRESHOLD, 						9);
	SHTPS_PARAM_DEF( SHTPS_HOVER_REJECT_3_2_IGNORE_TIME, 						40);
	SHTPS_PARAM_DEF( SHTPS_HOVER_REJECT_3_3_Z_THRESHOLD, 						7);
	SHTPS_PARAM_DEF( SHTPS_HOVER_REJECT_3_3_IGNORE_TIME, 						10);
	SHTPS_PARAM_DEF( SHTPS_HOVER_REJECT_4_MOVE_THRESHOLD, 						30);
	SHTPS_PARAM_DEF( SHTPS_HOVER_REJECT_4_PEN_Z_THRESHOLD,	 					10);
	SHTPS_PARAM_DEF( SHTPS_HOVER_REJECT_4_PEN_Z_FLUCTUATE,	 					3);
	SHTPS_PARAM_DEF( SHTPS_HOVER_REJECT_4_FINGER_Z_THRESHOLD,	 				30);
	SHTPS_PARAM_DEF( SHTPS_HOVER_REJECT_5_FINGER_Z_THRESHOLD,	 				35);
	SHTPS_PARAM_DEF( SHTPS_HOVER_REJECT_5_MOVE_THRESHOLD, 						50);

	SHTPS_PARAM_DEF( SHTPS_HOVER_REJECT_6_PEN_CHATT_CNT, 						4);
	SHTPS_PARAM_DEF( SHTPS_HOVER_REJECT_6_PEN_CHATT_Z_THRESHOLD_COND,			8);
	SHTPS_PARAM_DEF( SHTPS_HOVER_REJECT_6_PEN_CHATT_Z_THRESHOLD_COND_2,			2);
	SHTPS_PARAM_DEF( SHTPS_HOVER_REJECT_6_PEN_CHATT_Z_THRESHOLD_MIN,			12);
	SHTPS_PARAM_DEF( SHTPS_HOVER_REJECT_6_PEN_CHATT_Z_THRESHOLD_MAX,			29);
	SHTPS_PARAM_DEF( SHTPS_HOVER_REJECT_6_PEN_CHATT_TAP_CNT,					4);

	SHTPS_PARAM_DEF( SHTPS_HOVER_REJECT_FINGER_TU_PEN_IGNORE_TIME, 				200);
	SHTPS_PARAM_DEF( SHTPS_HOVER_REJECT_FINGER_TU_FINGER_IGNORE_TIME, 			35);
	SHTPS_PARAM_DEF( SHTPS_HOVER_REJECT_FINGER_TU_FINGER_TD_IGNORE_TIME, 		40);
	SHTPS_PARAM_DEF( SHTPS_HOVER_REJECT_FINGER_TU_PEN_IGNORE_MOVE_THRESHOLD,	100);
	SHTPS_PARAM_DEF( SHTPS_HOVER_REJECT_FINGER_TU_FINGER_IGNORE_TD_COUNT, 		3);
	SHTPS_PARAM_DEF( SHTPS_HOVER_REJECT_READ_TOUCH_EVENT_POLLING_TIME_MS, 		0);

	#if defined( SHTPS_LOG_DEBUG_ENABLE )
		SHTPS_PARAM_DEF( SHTPS_HOVER_REJECT_LOG_ENABLE, 0);
		#define	SHTPS_LOG_HOVER_REJECT(...)									\
			if(SHTPS_HOVER_REJECT_LOG_ENABLE != 0){							\
				printk(KERN_DEBUG "[shtps] [hover_reject]" __VA_ARGS__);	\
			}
	#else
		#define	SHTPS_LOG_HOVER_REJECT(...)
	#endif /* SHTPS_LOG_DEBUG_ENABLE */
#endif /* SHTPS_HOVER_REJECT_ENABLE */

/* -----------------------------------------------------------------------------------
 */
#if defined(SHTPS_PEN_EVENT_FAIL_CONTINUE_REJECT_ENABLE)
	#define SHTPS_PEN_Z_HIST_MAX									32
	#define SHTPS_PEN_FAIL_CONT_HOLD_INFO_NUM						32

	SHTPS_PARAM_DEF( SHTPS_HOST_PEN_CONNECT_REJECTION_ENABLE, 		0);
	SHTPS_PARAM_DEF( SHTPS_PEN_EVENT_FAIL_CONTINUE_REJECT_TYPE, 	2);
	SHTPS_PARAM_DEF( SHTPS_PEN_Z_HIST_COUNT_MAX, 					2);
	SHTPS_PARAM_DEF( SHTPS_PEN_EFFECT_Z_DIFF_THRESHOLD, 			3);
	SHTPS_PARAM_DEF( SHTPS_PEN_EFFECT_Z_AVERAGE_PERCENT, 			70);
	SHTPS_PARAM_DEF( SHTPS_PEN_FORCE_EFFECT_Z_THRESHOLD, 			100);
	SHTPS_PARAM_DEF( SHTPS_PEN_CHATTERING_TIME_MS, 					40);
	SHTPS_PARAM_DEF( SHTPS_PEN_Z_HIST_COUNT_2ND_MAX, 				2);
	SHTPS_PARAM_DEF( SHTPS_PEN_EFFECT_Z_DIFF_MIN_THRESHOLD, 		2);
	SHTPS_PARAM_DEF( SHTPS_PEN_EFFECT_Z_MAX_DIVIDE, 				2);
	SHTPS_PARAM_DEF( SHTPS_PEN_EFFECT_Z_MAX_DIVIDE_THRESHOLD, 		4);
	SHTPS_PARAM_DEF( SHTPS_PEN_CHATTERING_COUNT_MAX, 				1);
	SHTPS_PARAM_DEF( SHTPS_PEN_CHATTERING_CANCEL_Z_THRESHOLD, 		4);
	SHTPS_PARAM_DEF( SHTPS_PEN_CHATTERING_CANCEL_Z_MAX_PERCENT, 	70);

	#if defined( SHTPS_LOG_DEBUG_ENABLE )
		SHTPS_PARAM_DEF( SHTPS_PEN_EVENT_FAIL_CONTINUE_LOG_ENABLE, 0);
		#define	SHTPS_LOG_PEN_EVENT_FAIL_CONTINUE(...)							\
			if(SHTPS_PEN_EVENT_FAIL_CONTINUE_LOG_ENABLE != 0){					\
				printk(KERN_DEBUG "[shtps] [pen_fail_continue]" __VA_ARGS__);	\
			}
	#else
		#define	SHTPS_LOG_PEN_EVENT_FAIL_CONTINUE(...)
	#endif /* SHTPS_LOG_DEBUG_ENABLE */
#endif /* SHTPS_PEN_EVENT_FAIL_CONTINUE_REJECT_ENABLE */

/* -----------------------------------------------------------------------------------
 */
#if defined( SHTPS_PEN_POS_JUMP_REJECT_ENABLE )
	#define SHTPS_PEN_POS_JUMP_HIST_MAX									10
	#define SHTPS_PEN_POS_JUMP_HOLD_MAX									20

	SHTPS_PARAM_DEF( SHTPS_HOST_PEN_JUMP_REJECTION_ENABLE, 				0);
	SHTPS_PARAM_DEF( SHTPS_PEN_POS_JUMP_ACCELERATION_THRESHOLD, 		50000);
	SHTPS_PARAM_DEF( SHTPS_PEN_POS_JUMP_HOLD_ACCELERATION_THRESHOLD, 	100);
	SHTPS_PARAM_DEF( SHTPS_PEN_POS_JUMP_HIST_COUNT_MAX, 				3);
	SHTPS_PARAM_DEF( SHTPS_PEN_POS_JUMP_HOLD_EVENT_TIME_MAX, 			70);
	SHTPS_PARAM_DEF( SHTPS_PEN_POS_JUMP_TD_CHECK_COUNT_MAX, 			3);
	SHTPS_PARAM_DEF( SHTPS_PEN_POS_JUMP_HOLD_DRAG_THRESHOLD_MIN, 		100);
	SHTPS_PARAM_DEF( SHTPS_PEN_POS_JUMP_HOLD_DRAG_THRESHOLD_MAX, 		300);

	#if defined( SHTPS_LOG_DEBUG_ENABLE )
		SHTPS_PARAM_DEF( SHTPS_PEN_POS_JUMP_REJECT_LOG_ENABLE, 0);
		#define	SHTPS_LOG_PEN_POS_JUMP_REJECT(...)								\
			if(SHTPS_PEN_POS_JUMP_REJECT_LOG_ENABLE != 0){						\
				printk(KERN_DEBUG "[shtps] [pen_jump_reject]" __VA_ARGS__);		\
			}
	#else
		#define	SHTPS_LOG_PEN_POS_JUMP_REJECT(...)
	#endif /* SHTPS_LOG_DEBUG_ENABLE */
#endif /* SHTPS_PEN_POS_JUMP_REJECT_ENABLE */

/* -----------------------------------------------------------------------------------
 */
#if defined( SHTPS_COAXIAL_GHOST_REJECTION_ENABLE )
	SHTPS_PARAM_DEF( SHTPS_COAXIAL_GHOST_REJECT_ENABLE, 			1);
	SHTPS_PARAM_DEF( SHTPS_COAXIAL_GHOST_REJECT_DRAG_MAX_NUM,		5);
	SHTPS_PARAM_DEF( SHTPS_COAXIAL_GHOST_REJECT_DRAG_YDIFF_COND,	8);
	SHTPS_PARAM_DEF( SHTPS_COAXIAL_GHOST_REJECT_YDIFF_THRESH_MV,	150);
	SHTPS_PARAM_DEF( SHTPS_COAXIAL_GHOST_REJECT_YDIFF_THRESH_MV_ST,	15);
	SHTPS_PARAM_DEF( SHTPS_COAXIAL_GHOST_REJECT_YDIFF_THRESH_TD,	150);
	SHTPS_PARAM_DEF( SHTPS_COAXIAL_GHOST_REJECT_YDIFF_THRESH_TD_ST,	5);
	SHTPS_PARAM_DEF( SHTPS_COAXIAL_GHOST_REJECT_Z_THRESH_MV, 		50);
	SHTPS_PARAM_DEF( SHTPS_COAXIAL_GHOST_REJECT_Z_THRESH_MV_ST, 	65);
	SHTPS_PARAM_DEF( SHTPS_COAXIAL_GHOST_REJECT_Z_THRESH_TD, 		50);
	SHTPS_PARAM_DEF( SHTPS_COAXIAL_GHOST_REJECT_Z_THRESH_TD_ST,		60);
#endif /* SHTPS_COAXIAL_GHOST_REJECTION_ENABLE */

/* -----------------------------------------------------------------------------------
 */
#if defined(SHTPS_PINCH_FAIL_RESPONSE_REJECTION_ENABLE)

	SHTPS_PARAM_DEF( SHTPS_PINCH_FAIL_RESPONSE_REJECT_ENABLE, 			1);
	SHTPS_PARAM_DEF( SHTPS_PINCH_FAIL_FINGER_1ST_DISTANCE_THRESH, 		500);
	SHTPS_PARAM_DEF( SHTPS_PINCH_FAIL_FINGER_2ND_DISTANCE_THRESH, 		430);
	SHTPS_PARAM_DEF( SHTPS_SEGMENTATION_AGGRESSIVENESS_SET_VAL, 		0xFF);


	#if defined( SHTPS_LOG_DEBUG_ENABLE )
		SHTPS_PARAM_DEF( SHTPS_PINCH_FAIL_RESPONSE_REJECT_LOG_ENABLE, 		0);
	    #define	SHTPS_LOG_DBG_SHTPS_PINCH_FAIL_RESPONSE_PRINT(...)				\
	        if(SHTPS_PINCH_FAIL_RESPONSE_REJECT_LOG_ENABLE != 0){				\
	            printk(KERN_DEBUG "[shtps] [pinch_fail_reject]" __VA_ARGS__);	\
	        }
	#else
		#define	SHTPS_LOG_DBG_SHTPS_PINCH_FAIL_RESPONSE_PRINT(...)
	#endif /* SHTPS_LOG_DEBUG_ENABLE */
#endif /* SHTPS_PINCH_FAIL_RESPONSE_REJECTION_ENABLE */

/* -----------------------------------------------------------------------------------
 */
#if defined(SHTPS_PINCHOUT_OUTSET_DISTORT_REJECTION_ENABLE)
	SHTPS_PARAM_DEF( SHTPS_PINCHOUT_OUTSET_DISTORT_REJECT_ENABLE, 			0);
	SHTPS_PARAM_DEF( SHTPS_PINCHOUT_OUTSET_DISTORT_REJECT_Z_REDUCE_THRESH, 	10);
	SHTPS_PARAM_DEF( SHTPS_PINCHOUT_OUTSET_DISTORT_REJECT_DISTANCE_THRESH, 	340);

	#if defined( SHTPS_LOG_DEBUG_ENABLE )
		SHTPS_PARAM_DEF( SHTPS_PINCHOUT_OUTSET_DISTORT_REJECT_LOG_ENABLE, 	0);
	    #define	SHTPS_LOG_DBG_PINCHOUT_DISTORT_PRINT(...)				\
	        if(SHTPS_PINCHOUT_OUTSET_DISTORT_REJECT_LOG_ENABLE != 0){	\
	            printk(KERN_DEBUG "[shtps] [pinch_out]" __VA_ARGS__);	\
	        }
	#else
		#define	SHTPS_LOG_DBG_PINCHOUT_DISTORT_PRINT(...)
	#endif /* SHTPS_LOG_DEBUG_ENABLE */
#endif /* SHTPS_PINCHOUT_OUTSET_DISTORT_REJECTION_ENABLE */

/* -----------------------------------------------------------------------------------
 */
#if defined(SHTPS_BASELINE_OFFSET_DISABLE_WAIT_ENABLE)
	SHTPS_PARAM_DEF( SHTPS_BASELINE_OFFSET_CBC_READ_AFTER_WAIT, 		30);
	SHTPS_PARAM_DEF( SHTPS_BASELINE_OFFSET_CBC_SET_AFTER_WAIT, 			30);
#endif /* SHTPS_BASELINE_OFFSET_DISABLE_WAIT_ENABLE */


/* -----------------------------------------------------------------------------------
 */
#if defined(SHTPS_TOP_EDGE_FAIL_TOUCH_REJECTION_ENABLE)
	SHTPS_PARAM_DEF( SHTPS_TOP_EDGE_FAIL_TOUCH_REJECT_ENABLE, 		0);
	SHTPS_PARAM_DEF( SHTPS_TOP_EDGE_FAIL_TOUCH_REJECT_AREA, 		30);
	SHTPS_PARAM_DEF( SHTPS_TOP_EDGE_FAIL_TOUCH_REJECT_WX_THRESH_MAX, 	18);
	SHTPS_PARAM_DEF( SHTPS_TOP_EDGE_FAIL_TOUCH_REJECT_WX_THRESH_MIN, 	8);
	SHTPS_PARAM_DEF( SHTPS_TOP_EDGE_FAIL_TOUCH_REJECT_Z_THRESH, 	60);

	#if defined( SHTPS_LOG_DEBUG_ENABLE )
		SHTPS_PARAM_DEF( SHTPS_TOP_EDGE_FAIL_TOUCH_REJECT_LOG_ENABLE, 0);
	    #define	SHTPS_LOG_DBG_TOP_EDGE_FAIL_TOUCH_PRINT(...)						\
	        if(SHTPS_TOP_EDGE_FAIL_TOUCH_REJECT_LOG_ENABLE != 0){					\
	            printk(KERN_DEBUG "[shtps] [top_edge_fail_reject]" __VA_ARGS__);	\
	        }
	#else
		#define	SHTPS_LOG_DBG_TOP_EDGE_FAIL_TOUCH_PRINT(...)
	#endif /* SHTPS_LOG_DEBUG_ENABLE */
#endif /* SHTPS_TOP_EDGE_FAIL_TOUCH_REJECTION_ENABLE */

/* -----------------------------------------------------------------------------------
 */
#if defined( SHTPS_VARIABLE_PEN_JITTER_ENABLE )
	SHTPS_PARAM_DEF( SHTPS_HOST_SET_PEN_JITTER_FILTER_ENABLE, 		0);
	SHTPS_PARAM_DEF( SHTPS_PEN_JITTER_REG_ADDR,	 					0x042A);
	SHTPS_PARAM_DEF( SHTPS_VARIABLE_PEN_JITTER_COMPARE_HIST, 		6);
	SHTPS_PARAM_DEF( SHTPS_VARIABLE_PEN_JITTER_TIME_THRESHOLD, 		105);
	SHTPS_PARAM_DEF( SHTPS_VARIABLE_PEN_JITTER_POSITION_THRESHOLD, 	50);
	SHTPS_PARAM_DEF( SHTPS_VARIABLE_PEN_JITTER_FILTER_VAL, 			0x24);
#endif /* SHTPS_VARIABLE_PEN_JITTER_ENABLE */

/* -----------------------------------------------------------------------------------
 */
#if defined(SHTPS_WATER_GHOST_REJECTION_ENABLE)
	SHTPS_PARAM_DEF( SHTPS_WATER_GHOST_REJECT_ENABLE, 					1);
	SHTPS_PARAM_DEF( SHTPS_WATER_GHOST_REJECT_GHOST_THRESH,		 		85);
	SHTPS_PARAM_DEF( SHTPS_WATER_GHOST_REJECT_GHOST_THRESH_2,		 	100);
	SHTPS_PARAM_DEF( SHTPS_WATER_GHOST_REJECT_GHOST_THRESH_CHG_VAL,		50);
	SHTPS_PARAM_DEF( SHTPS_WATER_GHOST_REJECT_RETURN_THRESH,	 		200);
	SHTPS_PARAM_DEF( SHTPS_WATER_GHOST_REJECT_COUNT_MAX, 				50);
	SHTPS_PARAM_DEF( SHTPS_WATER_GHOST_REJECT_COUNT_CLEAR_TIME_THRESH,	100);
	SHTPS_PARAM_DEF( SHTPS_WATER_GHOST_REJECT_COUNT_CLEAR_POS_THRESH, 	300);

	#if defined( SHTPS_LOG_DEBUG_ENABLE )
		SHTPS_PARAM_DEF( SHTPS_WATER_GHOST_REJECT_LOG_ENABLE, 	0);
	    #define	SHTPS_LOG_DBG_WATER_GHOST_PRINT(...)				\
	        if(SHTPS_WATER_GHOST_REJECT_LOG_ENABLE != 0){	\
	            printk(KERN_DEBUG "[shtps] [water_ghost_reject]" __VA_ARGS__);	\
	        }
	#else
		#define	SHTPS_LOG_DBG_WATER_GHOST_PRINT(...)
	#endif /* SHTPS_LOG_DEBUG_ENABLE */
#endif /* SHTPS_WATER_GHOST_REJECTION_ENABLE */

/* -----------------------------------------------------------------------------------
 */
#if defined(SHTPS_WATER_CLING_REJECTION_ENABLE)
	SHTPS_PARAM_DEF( SHTPS_WATER_CLING_REJECT_ENABLE, 					1);
	SHTPS_PARAM_DEF( SHTPS_WATER_CLING_REJECT_Z_THRESH,		 			7);
	SHTPS_PARAM_DEF( SHTPS_WATER_CLING_REJECT_RATIO_THRESH,			 	50);
	SHTPS_PARAM_DEF( SHTPS_WATER_CLING_REJECT_COUNT_MAX, 				180);
	SHTPS_PARAM_DEF( SHTPS_WATER_CLING_REJECT_COUNT_CLEAR_TIME_THRESH,	100);

	#if defined( SHTPS_LOG_DEBUG_ENABLE )
		SHTPS_PARAM_DEF( SHTPS_WATER_CLING_REJECT_LOG_ENABLE, 	0);
	    #define	SHTPS_LOG_DBG_WATER_CLING_PRINT(...)				\
	        if(SHTPS_WATER_CLING_REJECT_LOG_ENABLE != 0){	\
	            printk(KERN_DEBUG "[shtps] [water_cling_reject]" __VA_ARGS__);	\
	        }
	#else
		#define	SHTPS_LOG_DBG_WATER_CLING_PRINT(...)
	#endif /* SHTPS_LOG_DEBUG_ENABLE */
#endif /* SHTPS_WATER_CLING_REJECTION_ENABLE */

/* -----------------------------------------------------------------------------------
 */
#if defined( SHTPS_CTRL_FW_REPORT_RATE )
	SHTPS_PARAM_DEF( SHTPS_CTRL_FW_REPORT_RATE_ENABLE, 				1);
	SHTPS_PARAM_DEF( SHTPS_CTRL_FW_REPORT_RATE_PARAM_NORMAL,		0x5C);
	SHTPS_PARAM_DEF( SHTPS_CTRL_FW_REPORT_RATE_PARAM_HIGH,			0x7B);
	#if defined(SHTPS_DEF_CTRL_FW_REPORT_RATE_LINKED_LCD_BRIGHT_ENABLE)
		SHTPS_PARAM_DEF( SHTPS_CTRL_FW_REPORT_RATE_PARAM_LCD_BRIGHT_LOW, 0x5C);
	#endif /* SHTPS_DEF_CTRL_FW_REPORT_RATE_LINKED_LCD_BRIGHT_ENABLE */

	SHTPS_PARAM_DEF( SHTPS_CTRL_FW_REPORT_RATE_STFLIB_KEVT_NORMAL,			SHTPS_DEF_STFLIB_KEVT_SCANRATE_MODE_NORMAL);
	SHTPS_PARAM_DEF( SHTPS_CTRL_FW_REPORT_RATE_STFLIB_KEVT_HIGH,			SHTPS_DEF_STFLIB_KEVT_SCANRATE_MODE_HIGH);
	SHTPS_PARAM_DEF( SHTPS_CTRL_FW_REPORT_RATE_STFLIB_KEVT_LCD_BRIGHT_LOW,	SHTPS_DEF_STFLIB_KEVT_SCANRATE_MODE_NORMAL);
#endif /* SHTPS_CTRL_FW_REPORT_RATE */

/* -----------------------------------------------------------------------------------
 */
#if defined(SHTPS_MULTI_TAP_FAIL_MOVE_REJECTION_ENABLE)
	SHTPS_PARAM_DEF( SHTPS_MULTI_TAP_FAIL_MOVE_REJECT_ENABLE, 			1);
	SHTPS_PARAM_DEF( SHTPS_MULTI_TAP_FAIL_MOVE_REJECT_TIME_THRESH, 		48);
	SHTPS_PARAM_DEF( SHTPS_MULTI_TAP_FAIL_MOVE_REJECT_POS_THRESH, 		30);

	#if defined( SHTPS_LOG_DEBUG_ENABLE )
		SHTPS_PARAM_DEF( SHTPS_MULTI_TAP_FAIL_MOVE_REJECT_LOG_ENABLE, 0);
	    #define	SHTPS_LOG_DBG_MULTI_TAP_FAIL_MOVE_PRINT(...)						\
	        if(SHTPS_MULTI_TAP_FAIL_MOVE_REJECT_LOG_ENABLE != 0){					\
	            printk(KERN_DEBUG "[shtps] [multi_touch_fail_move_reject]" __VA_ARGS__);	\
	        }
	#else
		#define	SHTPS_LOG_DBG_MULTI_TAP_FAIL_MOVE_PRINT(...)
	#endif /* SHTPS_LOG_DEBUG_ENABLE */
#endif /* SHTPS_MULTI_TAP_FAIL_MOVE_REJECTION_ENABLE */

/* -----------------------------------------------------------------------------------
 */
#if defined( SHTPS_PEN_CLING_REJECTION_ENABLE )
	SHTPS_PARAM_DEF( SHTPS_PEN_CLING_REJECT_ENABLE, 				1);
	SHTPS_PARAM_DEF( SHTPS_PEN_CLING_REJECT_AREA, 					40);
	SHTPS_PARAM_DEF( SHTPS_PEN_CLING_REJECT_TIME_THRESH,			10000);
	SHTPS_PARAM_DEF( SHTPS_PEN_CLING_REJECT_POS_THRESH,				10);
	SHTPS_PARAM_DEF( SHTPS_PEN_CLING_REJECT_TU_TIME_THRESH,			200);
	
	#if defined( SHTPS_LOG_DEBUG_ENABLE )
		SHTPS_PARAM_DEF( SHTPS_PEN_CLING_REJECT_LOG_ENABLE, 	0);
	    #define	SHTPS_PEN_CLING_REJECT_PRINT(...)				\
	        if(SHTPS_PEN_CLING_REJECT_LOG_ENABLE != 0){	\
	            printk(KERN_DEBUG "[shtps] [pen cling reject]" __VA_ARGS__);	\
	        }
	#else
		#define	SHTPS_PEN_CLING_REJECT_PRINT(...)
	#endif /* SHTPS_LOG_DEBUG_ENABLE */
#endif /* SHTPS_PEN_CLING_REJECTION_ENABLE */

/* -----------------------------------------------------------------------------------
 */
#if defined( SHTPS_LOW_POWER_MODE_ENABLE )
	SHTPS_PARAM_DEF( SHTPS_LOW_POWER_MODE_CHEK_HW_REV_ENABLE,			0);
	SHTPS_PARAM_DEF( SHTPS_LOW_POWER_MODE_DOZE_ENABLE,					1);
	SHTPS_PARAM_DEF( SHTPS_LOW_POWER_MODE_LCD_BRIGHT_DOZE_ENABLE,		0);
#endif /* SHTPS_LOW_POWER_MODE_ENABLE */

/* -----------------------------------------------------------------------------------
 */
#if defined(SHTPS_CHANGE_LAND_LOCK_DISTANCE_ENABLE)
	SHTPS_PARAM_DEF( SHTPS_LAND_LOCK_DISTANCE, 				0x0B);
#endif /* SHTPS_CHANGE_LAND_LOCK_DISTANCE_ENABLE */

/* -----------------------------------------------------------------------------------
 */
#if defined(SHTPS_COVER_ENABLE)
	SHTPS_PARAM_DEF( SHTPS_REG_PRM_COVER_WINDOW_LEFT, 				74);
	SHTPS_PARAM_DEF( SHTPS_REG_PRM_COVER_WINDOW_TOP, 				530);
	SHTPS_PARAM_DEF( SHTPS_REG_PRM_COVER_WINDOW_RIGHT, 				1004);
	SHTPS_PARAM_DEF( SHTPS_REG_PRM_COVER_WINDOW_BOTTOM, 			1319);
#endif /* SHTPS_COVER_ENABLE */

/* -----------------------------------------------------------------------------------
 */
#if defined( SHTPS_DEF_RECORD_LOG_FILE_ENABLE )
	#if defined( SHTPS_LOG_DEBUG_ENABLE )
		SHTPS_PARAM_DEF( SHTPS_RECORD_LOG_FILE_LOG_ENABLE,	0);
	    #define	SHTPS_RECORD_LOG_FILE_PRINT(...)							\
	        if(SHTPS_RECORD_LOG_FILE_LOG_ENABLE != 0){						\
	            printk(KERN_DEBUG "[shtps] [record_log_file]" __VA_ARGS__);	\
	        }
	#else
		#define	SHTPS_RECORD_LOG_FILE_PRINT(...)
	#endif /* SHTPS_LOG_DEBUG_ENABLE */
#endif /* SHTPS_DEF_RECORD_LOG_FILE_ENABLE */

/* -----------------------------------------------------------------------------------
 */
#if defined(SHTPS_INVERTING_GHOST_REJECTION_ENABLE)
	SHTPS_PARAM_DEF( SHTPS_INVERTING_GHOST_REJECT_ENABLE,				1);
	SHTPS_PARAM_DEF( SHTPS_INVERTING_GHOST_REJECT_PROXIMITY_CHECK_ENABLE,	1);
	SHTPS_PARAM_DEF( SHTPS_INVERTING_GHOST_REJECT_PALM_AMPLITUDE_THRESH,	0x32);
	SHTPS_PARAM_DEF( SHTPS_INVERTING_GHOST_REJECT_PALM_AREA_THRESH,			0x20);
	SHTPS_PARAM_DEF( SHTPS_INVERTING_GHOST_REJECT_CHANGE_PALM_REG_ENABLE,	0);

	#if defined( SHTPS_LOG_DEBUG_ENABLE )
		SHTPS_PARAM_DEF( SHTPS_INVERTING_GHOST_REJECT_LOG_ENABLE, 	0);
	    #define	SHTPS_INVERTING_GHOST_REJECT_PRINT(...)				\
	        if(SHTPS_INVERTING_GHOST_REJECT_LOG_ENABLE != 0){	\
	            printk(KERN_DEBUG "[shtps] [inverting ghost]" __VA_ARGS__);	\
	        }
	#else
		#define	SHTPS_INVERTING_GHOST_REJECT_PRINT(...)
	#endif /* SHTPS_LOG_DEBUG_ENABLE */
#endif /* SHTPS_INVERTING_GHOST_REJECTION_ENABLE */

/* -----------------------------------------------------------------------------------
 */
#if defined(SHTPS_DEF_GLOVE_DETECT_FAIL_RESOLVE_ENABLE)
	SHTPS_PARAM_DEF( SHTPS_PRM_GLOVE_DETECT_FAIL_RESOLVE_ENABLE, 	1);
	SHTPS_PARAM_DEF( SHTPS_PRM_GLOVE_TU_DELAY_TIME_MS, 				70);
	SHTPS_PARAM_DEF( SHTPS_PRM_GLOVE_TU_DELAY_CHECK_MOVE_THRESH, 	100);

	#if defined( SHTPS_LOG_DEBUG_ENABLE )
		SHTPS_PARAM_DEF( SHTPS_PRM_GLOVE_DETECT_FAIL_RESOLVE_LOG_ENABLE,	0);
	    #define	SHTPS_GLOVE_DETECT_FAIL_RESOLVE_PRINT(...)							\
	        if(SHTPS_PRM_GLOVE_DETECT_FAIL_RESOLVE_LOG_ENABLE != 0){						\
	            printk(KERN_DEBUG "[shtps] [glove_fail_rslv]" __VA_ARGS__);	\
	        }
	#else
		#define	SHTPS_GLOVE_DETECT_FAIL_RESOLVE_PRINT(...)
	#endif /* SHTPS_LOG_DEBUG_ENABLE */
#endif /* SHTPS_DEF_GLOVE_DETECT_FAIL_RESOLVE_ENABLE */

/* -----------------------------------------------------------------------------------
 */
#if defined(SHTPS_TEMPERATURE_GHOST_REJECT_CHECK_ENABLE)
	SHTPS_PARAM_DEF( SHTPS_TEMPERATURE_GHOST_REJECT_ENABLE,				1);
	SHTPS_PARAM_DEF( SHTPS_TEMPERATURE_GHOST_REJECT_W_THRESH,			60);

	#if defined( SHTPS_LOG_DEBUG_ENABLE )
		SHTPS_PARAM_DEF( SHTPS_TEMPERATURE_GHOST_REJECT_LOG_ENABLE, 	0);
	    #define	SHTPS_TEMPERATURE_GHOST_REJECT_PRINT(...)				\
	        if(SHTPS_TEMPERATURE_GHOST_REJECT_LOG_ENABLE != 0){	\
	            printk(KERN_DEBUG "[shtps] [temperature ghost]" __VA_ARGS__);	\
	        }
	#else
		#define	SHTPS_TEMPERATURE_GHOST_REJECT_PRINT(...)
	#endif /* SHTPS_LOG_DEBUG_ENABLE */
#endif /* SHTPS_TEMPERATURE_GHOST_REJECT_CHECK_ENABLE */

/* -----------------------------------------------------------------------------------
 */
#if defined(SHTPS_DEF_GLOVE_CHANGE_LANDLIFTFILTER_ENABLE)
	SHTPS_PARAM_DEF( SHTPS_PRM_GLOVE_CHANGE_LLF_ENABLE,					1);
	SHTPS_PARAM_DEF( SHTPS_PRM_GLOVE_CHANGE_LLF_LAND_LOCK_DISTANCE,		0x19);
#endif /* SHTPS_DEF_GLOVE_CHANGE_LANDLIFTFILTER_ENABLE */

/* -----------------------------------------------------------------------------------
 */
#endif /* __SHTPS_PARAM_PRJ_000624_3_H__ */
